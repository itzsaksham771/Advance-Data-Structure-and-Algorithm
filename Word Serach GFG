class Solution {
    static public boolean isWordExist(char[][] mat, String word) {
        if (mat == null || mat.length == 0 || word == null || word.length() == 0) {
            return false;
        }
        int n = mat.length;
        int m = mat[0].length;
        boolean[][] visited = new boolean[n][m];
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == word.charAt(0) && dfs(mat, word, i, j, 0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private static boolean dfs(char[][] mat, String word, int row, int col, int index, boolean[][] visited) {
        if (index == word.length()) {
            return true;
        }
        if (row < 0 || row >= mat.length || col < 0 || col >= mat[0].length 
            || visited[row][col] || mat[row][col] != word.charAt(index)) {
            return false;
        }
        
        visited[row][col] = true;
        if (dfs(mat, word, row+1, col, index+1, visited) ||
            dfs(mat, word, row-1, col, index+1, visited) ||
            dfs(mat, word, row, col+1, index+1, visited) ||
            dfs(mat, word, row, col-1, index+1, visited)) {
            return true;
        }
        visited[row][col] = false;
        return false;
    }
}
