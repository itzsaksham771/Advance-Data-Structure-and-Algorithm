import java.util.*;

class Solution {

    static class Job {
        int deadline;
        int profit;

        Job(int d, int p) {
            this.deadline = d;
            this.profit = p;
        }
    }

    public ArrayList<Integer> jobSequencing(int[] deadline, int[] profit) {
        int n = deadline.length;

        // Step 1: Create jobs array
        Job[] jobs = new Job[n];
        for (int i = 0; i < n; i++) {
            jobs[i] = new Job(deadline[i], profit[i]);
        }

        // Step 2: Sort jobs by descending profit
        Arrays.sort(jobs, (a, b) -> b.profit - a.profit);

        // Step 3: Find max deadline for the size of time slots array
        int maxDeadline = 0;
        for (Job job : jobs) {
            if (job.deadline > maxDeadline) {
                maxDeadline = job.deadline;
            }
        }

        // Step 4: Boolean array to mark free slots, index 1 to maxDeadline
        boolean[] slot = new boolean[maxDeadline + 1];

        int countJobs = 0;
        int totalProfit = 0;

        // Step 5: Assign jobs to free slots from their deadline backwards
        for (Job job : jobs) {
            for (int j = job.deadline; j > 0; j--) {
                if (!slot[j]) {
                    slot[j] = true;
                    countJobs++;
                    totalProfit += job.profit;
                    break;
                }
            }
        }

        // Prepare the result
        ArrayList<Integer> result = new ArrayList<>();
        result.add(countJobs);
        result.add(totalProfit);

        return result;
    }
}
