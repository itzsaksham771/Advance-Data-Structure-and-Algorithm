class Solution { 
    static int preIndex = 0;
    static Map<Integer, Integer> inorderIndexMap;
    public static Node buildTree(int inorder[], int preorder[]) { 
        preIndex = 0;
        inorderIndexMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) { 
            inorderIndexMap.put(inorder[i], i);
        }
        return buildTreeHelper(preorder, 0, inorder.length - 1);
    }
    private static Node buildTreeHelper(int[] preorder, int inStart, int inEnd) { 
        if (inStart > inEnd) return null;
        int rootVal = preorder[preIndex++];
        Node root = new Node(rootVal);
        int inIndex = inorderIndexMap.get(rootVal);
        root.left = buildTreeHelper(preorder, inStart, inIndex - 1);
        root.right = buildTreeHelper(preorder, inIndex + 1, inEnd);
        return root;
    }
}
