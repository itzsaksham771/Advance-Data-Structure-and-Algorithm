class Solution { 
    public ArrayList<Integer> longestSubarray(int[] arr, int x) { 
        int n = arr.length;
        int left = 0, right = 0;
        int maxLen = 0, start = 0;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        while (right < n) { 
            map.put(arr[right], map.getOrDefault(arr[right], 0) + 1);
            while (map.lastKey() - map.firstKey() > x) { 
                map.put(arr[left], map.get(arr[left]) - 1);
                if (map.get(arr[left]) == 0) { 
                    map.remove(arr[left]);
                }
                left++;
            }
            if (right - left + 1 > maxLen) { 
                maxLen = right - left + 1;
                start = left;
            }
            right++;
        }
        ArrayList<Integer> res = new ArrayList<>();
        for (int i = start; i < start + maxLen; i++) { 
            res.add(arr[i]);
        }
        return res;
    }
}
