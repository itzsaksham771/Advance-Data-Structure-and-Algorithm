class Solution {
    static Node reverse(Node head) { 
        Node prev = null, curr = head, next = null;
        while (curr != null) { 
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    static Node removeLeadingZeros(Node head) { 
        while (head != null && head.data == 0) { 
            head = head.next;
        }
        return (head == null) ? new Node(0) : head;
    }
    static Node addTwoLists(Node num1, Node num2) { 
        num1 = reverse(num1);
        num2 = reverse(num2);
        Node dummy = new Node(0);
        Node curr = dummy;
        int carry = 0;
        while (num1 != null || num2 != null || carry != 0) { 
            int sum = carry;
            if (num1 != null) { 
                sum += num1.data;
                num1 = num1.next;
            }
            if (num2 != null) { 
                sum += num2.data;
                num2 = num2.next;
            }
            carry = sum / 10;
            curr.next = new Node(sum % 10);
            curr = curr.next;
        }
        Node result = reverse(dummy.next);
        return removeLeadingZeros(result);
    }
}
