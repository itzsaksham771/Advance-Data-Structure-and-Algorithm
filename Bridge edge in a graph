import java.util.*;
class Solution { 
    int time;
    boolean foundBridge;
    public boolean isBridge(int V, int[][] edges, int c, int d) { 
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) { 
            adj.add(new ArrayList<>());
        }
        for (int[] e : edges) { 
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }
        int[] disc = new int[V];
        int[] low = new int[V];
        boolean[] visited = new boolean[V];
        time = 0;
        foundBridge = false;
        for (int i = 0; i < V; i++) { 
            if (!visited[i]) { 
                dfs(i, -1, adj, visited, disc, low, c, d);
            }
        }
        return foundBridge;
    }
    private void dfs(int u, int parent, List<List<Integer>> adj, boolean[] visited,
    int[] disc, int[] low, int c, int d) { 
visited[u] = true;
disc[u] = low[u] = ++time;
for (int v : adj.get(u)) { 
    if (v == parent) { 
        continue;
    }
    if (!visited[v]) { 
        dfs(v, u, adj, visited, disc, low, c, d);
        low[u] = Math.min(low[u], low[v]);
        if (low[v] > disc[u]) { 
            if ((u == c && v == d) || (u == d && v == c)) { 
                foundBridge = true;
            }
        }
    } else { 
        low[u] = Math.min(low[u], disc[v]);
    }
}
}
}
